{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GlobeTalk \u2014 Virtual Pen Pals \ud83c\udf0d\u2709\ufe0f","text":"<p>GlobeTalk is a privacy-first, anonymous pen-pal platform that connects people around the world for friendly, cultural, asynchronous \u201cletter\u201d exchanges. It recreates the charm of postal pen pals using modern web tech: random matchmaking, delayed message delivery, short cultural profiles, and moderation \u2014 text-only and anonymous by design.</p> <p> </p>"},{"location":"#table-of-contents","title":"Table of contents","text":"<ol> <li>Quick summary</li> <li>Team member roles</li> <li>Project Management Methodology</li> <li>Features </li> <li>Tech stack </li> <li>Git Methodology </li> <li>Architecture &amp; data model </li> <li>API endpoints </li> <li>Local setup &amp; development </li> <li>Testing &amp; CI </li> <li>Sprint 1 deliverables </li> <li>Privacy, safety &amp; moderation </li> <li>Contributing </li> <li>Contact &amp; support </li> <li>License</li> </ol>"},{"location":"#quick-summary","title":"Quick summary","text":"<ul> <li>Purpose: Help users make anonymous, cross-cultural connections via delayed text letters.  </li> <li>Key constraints: Text-only (no file/media), anonymous (no names/emails published), moderation/reporting, OAuth-based sign-in for account protection.  </li> <li>Target users: Curious learners,language learners, students, and anyone seeking low-pressure cultural exchange.</li> </ul>"},{"location":"#team-member-roles","title":"Team member roles","text":"<ul> <li>Product Owner &amp; Client:Nathan (Responsible for defining the product vision and prioritizing features.)</li> <li>Scrum Master:Diana (Facilitates the Scrum process, leads meetings, and ensures the team stays on track.)</li> <li>Team:The group of individuals who develop, test, and support the product, include:<ul> <li>Keevon Jacobs</li> <li>Makomane Tau</li> <li>Ponani Ngobeni</li> <li>Khethani Vhuthuhawe</li> <li>Smiso Ndlovu</li> <li>Diana Bingani</li> </ul> </li> </ul>"},{"location":"#project-management-methodology","title":"Project Management Methodology","text":"<p>Youtube reference:   Introduction to scrum - https://www.youtube.com/watch?v=9TycLR0TqFA&amp;t=10s   Online Book Source   The 2020 Scrum Guide by Schwaber &amp; Sutherland - https://scrumguides.org/scrum-guide.html</p> <ul> <li> <p>We have chosen Agile Scrum as our project management methodology. Scrum is an iterative and collaborative framework that divides the project into short, manageable cycles called sprints. Each sprint produces an incremental release, allowing us to continuously improve the product, respond to feedback, and adapt to changing requirements throughout the development process.</p> </li> <li> <p>Three Key Artifacts in Scrum</p> <ul> <li>Product Backlog: A comprehensive list of all desired features and requirements for the product, including items planned for future sprints.</li> <li>Sprint Backlog: A prioritized list of features and tasks selected from the product backlog for completion during the current sprint.</li> <li>Burn Down Chart: A visual representation of progress, showing how much work remains in the sprint backlog over time.</li> </ul> </li> <li> <p>Three Main Ceremonies</p> <ul> <li>Sprint Planning: All team members meet to discuss user stories, define sprint goals, and estimate the effort required for each task.</li> <li>Weekly Scrum (Daily Stand-up): Team members briefly share what they have completed, what they are currently working on, and any obstacles they are facing</li> <li>Sprint Review / Retrospective: Held at the end of each sprint. The team demonstrates progress to the client and reflects on what went well and what can be improved in future sprints.</li> </ul> </li> <li> <p>Sequence of our project management methodology</p> <ol> <li>Product Backlog</li> <li>Sprint Planning</li> <li>Sprint Backlog</li> <li>Sprint </li> <li>Sprint Review </li> <li>Sprint Retrospective</li> </ol> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Random Matchmaking \u2014 pair users globally with optional filters (language, region/time-zone).  </li> <li>Asynchronous Messaging \u2014 write a \u201cletter\u201d, schedule a delivery delay (e.g., 12 hours).  </li> <li>Cultural Profiles \u2014 short, anonymous fields (age range, hobbies, region, languages).  </li> <li>Inbox / Compose \u2014 thread-based UI for reading and writing letters.  </li> <li>Moderation \u2014 reporting, moderation logs, blocking.  </li> <li>Settings &amp; Safety \u2014 block/report, toggle match preferences, delete account.</li> </ul>"},{"location":"#tech-stack","title":"Tech Stack","text":"<p>See getting-started/tech-stack.md for full details on our frontend, backend, deployment, and development infrastructure choices.</p>"},{"location":"#git-methodology","title":"Git Methodology","text":"<p>See workflow/git-methodology.md for our full branching strategy, workflow, code quality checks, and PR rules.</p>"},{"location":"#architecture-data-model","title":"Architecture &amp; Data Model","text":"<p>See documentation/architecture.md for full details.</p> <p>Summary: GlobeTalk uses a modular architecture with a Next.js frontend, a backend API for matchmaking and messaging, a NoSQL database for storing users, profiles, matches, and messages, and a worker/scheduler for delayed message delivery. The data model is privacy-focused, with anonymous IDs and moderation logs to ensure safety.</p>"},{"location":"#testing-ci","title":"Testing &amp; CI","text":"<p>See workflow/testing.md for full details on our testing strategy, tools, and CI/CD setup.</p> <ul> <li>Jest for unit and integration tests  </li> <li>Testing Library for React component tests  </li> <li>GitHub Actions for CI/CD  </li> <li>Codecov for code coverage reporting  </li> </ul>"},{"location":"#sprint-1-deliverables","title":"Sprint 1 Deliverables","text":"<ul> <li> User authentication (email, Google OAuth)</li> <li> Responsive UI (Next.js + Tailwind CSS)</li> <li> Netlify deployment</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Fork the repo and clone locally</li> <li>Create a new branch (<code>git checkout -b feature/my-feature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add feature'</code>)</li> <li>Push to GitHub and open a Pull Request</li> </ol> <p>See CONTRIBUTING.md for more details.</p>"},{"location":"#contact-support","title":"Contact &amp; Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Email: pontshotau097@gmail.com</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See <code>LICENSE</code> for details.</p>"},{"location":"documentation/architecture/","title":"Architecture","text":""},{"location":"documentation/architecture/#architecture-data-model","title":"Architecture &amp; Data Model","text":""},{"location":"documentation/architecture/#high-level-components","title":"High-Level Components","text":"<ul> <li>Frontend (Next): UI, authentication redirect, profile flow  </li> <li>Backend API: Matchmaking, messaging, moderation  </li> <li>Database: Persistent storage for users, matches, messages, logs  </li> <li>Worker / Scheduler: Processes delayed deliveries</li> </ul>"},{"location":"documentation/architecture/#minimal-db-schema-nosql","title":"Minimal DB Schema (NoSQL)","text":"<pre><code>users\n{\n    \"uid\": \"uid_abc123\",\n    \"anonId\": \"G-42a7\",\n    \"createdAt\": \"&lt;Firestore Timestamp&gt;\",\n    \"lastSeenAt\": \"&lt;Firestore Timestamp&gt;\",\n    \"authProvider\": \"google\",\n    \"settings\": {\n        \"receiveEmail\": false\n    }\n}\n\nprofiles\n{\n    \"anonId\": \"G-42a7\",\n    \"ownerUid\": \"uid_abc123\",\n    \"region\": \"South Africa\",\n    \"languages\": [\"English\", \"Zulu\"],\n    \"hobbies\": [\"music\", \"soccer\"],\n    \"bio\": \"22-28 \u2022 interested in culture &amp; language exchange\",\n    \"createdAt\": \"&lt;Firestore Timestamp&gt;\"\n}\n\nmatches\n{\n    \"id\": \"match_ab12\",\n    \"userA\": \"uid_abc123\",\n    \"userB\": \"uid_def456\",\n    \"matchedAt\": \"&lt;Firestore Timestamp&gt;\",\n    \"longTerm\": false,\n    \"state\": \"active\"\n}\n\nmessages\n{\n    \"id\": \"msg_x001\",\n    \"senderId\": \"uid_abc123\",\n    \"body\": \"Hello from South Africa! What are your local holidays like?\",\n    \"createdAt\": \"&lt;Firestore Timestamp&gt;\",\n    \"deliveryTime\": \"&lt;Firestore Timestamp&gt;\",\n    \"delivered\": false,\n    \"deliveredAt\": null,\n    \"flagged\": 0\n}\n\nmoderation_logs\n{\n    \"id\": \"report_0001\",\n    \"reporterId\": \"uid_xyz789\",\n    \"messageRef\": \"/matches/match_ab12/messages/msg_x001\",\n    \"reason\": \"abusive language\",\n    \"status\": \"pending\",\n    \"createdAt\": \"&lt;Firestore Timestamp&gt;\",\n    \"handledBy\": null,\n    \"actionTaken\": null\n}\n</code></pre>"},{"location":"documentation/architecture/#api-endpoints","title":"API Endpoints","text":"<p>See docs/api.md for full request/response examples.</p>"},{"location":"documentation/architecture/#auth","title":"Auth","text":"<ul> <li><code>GET /auth/oauth/login</code> \u2014 Redirect user to OAuth provider</li> <li><code>POST /auth/oauth/callback</code> \u2014 Exchange provider code for app JWT</li> </ul>"},{"location":"documentation/architecture/#profiles","title":"Profiles","text":"<ul> <li><code>POST /profiles</code> \u2014 Create or update a profile</li> <li><code>GET /profiles/:anonId</code> \u2014 Retrieve a profile by public anon ID</li> </ul>"},{"location":"documentation/architecture/#matchmaking","title":"Matchmaking","text":"<ul> <li><code>POST /match</code> \u2014 Request a new match (with optional filters)</li> <li><code>GET /matches</code> \u2014 List active matches for the current user</li> </ul>"},{"location":"documentation/architecture/#messaging","title":"Messaging","text":"<ul> <li><code>POST /messages</code> \u2014 Write a letter (delayed delivery)</li> <li><code>GET /messages/:matchId</code> \u2014 Get delivered messages for a match</li> </ul>"},{"location":"documentation/architecture/#moderation","title":"Moderation","text":"<ul> <li><code>POST /moderation/report</code> \u2014 Report a message</li> <li><code>GET /moderation/reports</code> \u2014 Moderator-only list of reports</li> <li><code>POST /admin/moderation/:reportId/action</code> \u2014 Moderator resolves report</li> <li><code>DELETE /users/:uid</code> \u2014 Delete user account (self or admin)</li> </ul>"},{"location":"getting-started/dev-setup/","title":"Development Guides","text":""},{"location":"getting-started/dev-setup/#nextjs","title":"Next.js","text":"<ol> <li>Install Node.js (LTS version recommended).</li> <li>Create the app:</li> </ol> <p><pre><code>npx create-next-app@latest my-app\ncd my-app\n</code></pre> 3. Run the development server <pre><code>npm run dev\n</code></pre> 4. Open in browser <pre><code>Go to http://localhost:3000\n</code></pre> 5. Start building \u2192 Edit files in the pages/ or app/ directory.</p>"},{"location":"getting-started/dev-setup/#github-repo","title":"GitHub repo","text":"<ol> <li>Create a new repo on GitHub (choose name, description, public)</li> <li>In VScode terminal Initialize Git in your project <pre><code>git init\n</code></pre></li> <li>Add remote origin <pre><code>git remote add origin https://github.com/USERNAME/REPO-NAME.git\n</code></pre></li> <li>Stage and commit files <pre><code>git add .\ngit commit -m \"Initial commit\"\n</code></pre></li> <li>Push to GitHub <pre><code>git branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"getting-started/dev-setup/#github-pages","title":"GitHub pages","text":"<ol> <li>Have a GitHub repo with your project code</li> <li>Push code to main branch (or another branch if you prefer).</li> <li>Enable GitHub Pages <pre><code>Go to Settings \u2192 Pages in your repo.\nUnder Source, select the branch (main) and folder (/root or /docs)\n</code></pre></li> <li>Save settings \u2192 GitHub will give you a live URL</li> <li>Access your site once the deployment finishes</li> </ol>"},{"location":"getting-started/dev-setup/#netlify-deployment","title":"Netlify Deployment","text":"<ol> <li>Create a Netlify account (or log in).</li> <li>Connect your GitHub repo <pre><code>Click New Site \u2192 Import from Git \u2192 Select your repo\n</code></pre></li> <li>Configure build settings <pre><code>Build command: npm run build\nPublish directory: out (for Next.js static export) or build (for React)\n</code></pre></li> <li>Deploy site \u2192 Netlify will build and give you a live URL.</li> <li>Optional \u2192 Set up custom domain in Netlify settings.</li> </ol>"},{"location":"getting-started/dev-setup/#firebase-auth","title":"Firebase auth","text":"<ol> <li>Create a Firebase project at Firebase Console.</li> <li>Add a web app \u2192 Get Firebase config (apiKey, authDomain, etc.).</li> <li>Install Firebase SDK in your project: <pre><code>npm install firebase\n</code></pre></li> <li>Initialize Firebase in your project: <pre><code>import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nconst firebaseConfig = { /* your config */ };\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n</code></pre></li> <li>Enable auth methods in Firebase Console \u2192 Authentication \u2192 Sign-in method (Email/Password, Google, etc.).</li> <li>Use Firebase Auth to register, login, and manage users in your app.</li> </ol>"},{"location":"getting-started/dev-setup/#firestore","title":"Firestore","text":"<ol> <li>Create a Firebase project (or use an existing one).</li> <li>Enable Firestore in the Firebase Console \u2192 Firestore Database \u2192 Create database.</li> <li>Install Firebase SDK (if not already done)</li> <li>Initialize Firestore in your project: <pre><code>import { getFirestore } from \"firebase/firestore\";\nconst db = getFirestore(app); // app is your initialized Firebase app\n</code></pre></li> <li>Use Firestore to read/write data: <pre><code>Add document: addDoc(collection(db, \"users\"), { name: \"John\" })\nGet documents: getDocs(collection(db, \"users\"))\nUpdate document: updateDoc(doc(db, \"users\", docId), { age: 30 })\nDelete document: deleteDoc(doc(db, \"users\", docId))\n</code></pre></li> </ol>"},{"location":"getting-started/tech-stack/","title":"Tech stack","text":""},{"location":"getting-started/tech-stack/#tech-stack-ralational-database","title":"Tech Stack &amp; Ralational Database","text":"<p>Frontend</p> <ul> <li> <p>Next.js: Modern UI Library with hooks and context     Youtube reference:</p> <ul> <li>Why next.js over react - https://www.youtube.com/watch?v=msJicleNHkA</li> <li>Routing: Next.js provides a built-in file-based routing system that automatically maps files in the pages directory to URLs, making navigation intuitive without extra configuration.</li> <li>Code-Splitting: It automatically splits JavaScript by page, so users only download the code needed for the page they\u2019re viewing, improving load times.</li> <li>Pre-Rendering: Next.js can generate HTML for each page at build time (SSG) or on request (SSR), boosting SEO and performance compared to client-side rendering</li> <li>API Support: It allows you to create serverless API routes directly in the same project, removing the need for a separate backend for simple server-side logic</li> </ul> </li> <li> <p>Tailwind CSS: Utility-first CSS framework     Youtube reference:</p> <ul> <li>Why tailwind css - https://www.youtube.com/watch?v=pKrPeUQiDu4</li> <li>Utility-First Styling: Tailwind offers a wide range of low-level utility classes that let you style elements directly in your markup without writing separate CSS files.</li> <li>Customization: It\u2019s highly configurable via a single config file, allowing you to define colors, spacing, typography, and breakpoints to match your design system.</li> <li>Responsive Design: Built-in responsive variants make it easy to create designs that adapt seamlessly across different screen sizes.</li> <li>Performance: Tailwind automatically purges unused CSS in production, keeping file sizes small and load times fast.</li> </ul> </li> <li>React Query</li> <li>React Context API</li> </ul> <p>Backend</p> <ul> <li>Next.js API routes  </li> <li>Firebase</li> <li>Backend-as-a-Service Platform<ul> <li>Firebase Auth: Firebase Authentication provides ready-to-use sign-in methods (email, password, social logins) with secure session management, reducing the need to build auth from scratch.</li> <li>Firestore: A scalable NoSQL database that syncs data in real-time across clients, making it ideal for dynamic and collaborative apps.  </li> </ul> </li> <li>Express.js</li> <li>Minimal and Flexible: Express provides a lightweight core with the flexibility to add only the middleware and features you need.</li> <li>Routing: Offers a simple yet powerful routing system to handle different HTTP methods and URL patterns.</li> <li>Middleware Support: Easily integrates third-party or custom middleware to handle requests, responses, authentication, and more.</li> <li>REST API Development: Well-suited for building robust and scalable RESTful APIs quickly with minimal boilerplate..</li> </ul> <p>Deployment</p> <ul> <li>Netlify <ul> <li>Continuous Deployment: Automatically builds and deploys your site whenever you push changes to your Git repository.</li> <li>Global CDN: Delivers your site through a fast, globally distributed content delivery network for low-latency access worldwide</li> <li>Serverless Functions: Allows you to run backend logic without maintaining a server, ideal for lightweight APIs and dynamic features.</li> <li>Instant Rollbacks: Lets you revert to any previous deploy instantly, ensuring quick recovery from issues.</li> </ul> </li> </ul> <p>Development Infrastructure</p> <ul> <li>GitHub for version control  </li> <li>GitHub Actions for CI (test.yml)<ul> <li>Jest for unit testing</li> <li>Codecov for Code Coverage</li> </ul> </li> <li>Hosting: Netlify (One-click deployment)</li> <li>Secrets &amp; Environment management: Github Secrets &amp; Netlify Environment Variables</li> <li>Docs site: GitHub Pages (MkDocs)</li> </ul>"},{"location":"workflow/git-methodology/","title":"Git Methodology","text":""},{"location":"workflow/git-methodology/#git-methodology","title":"Git Methodology","text":"<ul> <li> <p>We follow a main / dev / feature branching strategy:</p> <ul> <li>main: always stable &amp; deployed.</li> <li>dev: integration branch where features are merged.</li> <li>feature/name: each new feature or fix has its own branch.</li> </ul> </li> <li> <p>Workflow:</p> <ol> <li>Switch to latest dev branch</li> <li>Pull latest dev.</li> <li>Create a feature/* branch.</li> <li>Do your changes</li> <li>Run tests</li> <li>Stage &amp; Commit(conventional commits)</li> <li>Pull latest dev to your feature branch</li> <li>Push changes.</li> <li>Open a Pull Request (PR) into dev.</li> <li>After review &amp; testing, merge dev to main.</li> </ol> </li> <li> <p>Code Quality Checks:</p> <ul> <li>Run ESLint (npx eslint . --fix) and Jest tests (npm test) before pushing.</li> <li>GitHub Actions runs CI(tests &amp; lint) checks on every PR.</li> <li>After review, merge dev \u2192 main for releases</li> </ul> </li> <li> <p>Rules:</p> <ul> <li>No direct commits to main.</li> <li>All code goes through PR review.</li> <li>Netlify auto-deploys from main.</li> </ul> </li> </ul>"},{"location":"workflow/testing/","title":"Testing &amp; CI","text":"<ul> <li> <p>Jest for unit and integration tests     Jest is a fast and reliable JavaScript testing framework. We use it because it provides a simple API, excellent performance, and built-in support for mocking and coverage analysis. It helps ensure our code works as expected and catches regressions early.</p> </li> <li> <p>Testing Library for React component tests     Testing Library encourages testing components from the user's perspective, focusing on accessibility and real-world usage. It helps us write maintainable tests that verify UI behavior without relying on implementation details.</p> </li> <li> <p>GitHub Actions for CI/CD     GitHub Actions automates our build, test, and deployment workflows directly in our repository. It provides seamless integration with GitHub, enabling us to run tests and deploy code on every push or pull request, ensuring code quality and reducing manual effort.</p> </li> <li> <p>Codecov for code coverage reporting     Codecov integrates with our CI pipeline to track code coverage metrics. It gives us insights into which parts of our codebase are tested, helping us identify gaps and maintain high test coverage over time.</p> </li> </ul>"}]}