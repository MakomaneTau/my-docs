{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GlobeTalk \u2014 Virtual Pen Pals \ud83c\udf0d\u2709\ufe0f","text":"<p>GlobeTalk is a privacy-first, anonymous pen-pal platform that connects people around the world for friendly, cultural, asynchronous \u201cletter\u201d exchanges. It recreates the charm of postal pen pals using modern web tech: random matchmaking, delayed message delivery, short cultural profiles, and moderation \u2014 text-only and anonymous by design.</p> <p></p> <p></p>"},{"location":"#table-of-contents","title":"Table of contents","text":"<ol> <li>Quick summary</li> <li>Team member roles</li> <li>Project Management Methodology</li> <li>Features </li> <li>Tech stack </li> <li>Git Methodology </li> <li>Architecture &amp; data model </li> <li>API endpoints </li> <li>Local setup &amp; development </li> <li>Testing &amp; CI </li> <li>Sprint 1 deliverables </li> <li>Privacy, safety &amp; moderation </li> <li>NPM Audit</li> <li>Contributing </li> <li>Contact &amp; support </li> <li>License</li> </ol>"},{"location":"#quick-summary","title":"Quick summary","text":"<ul> <li>Purpose: Help users make anonymous, cross-cultural connections via delayed text letters.  </li> <li>Key constraints: Text-only (no file/media), anonymous (no names/emails published), moderation/reporting, OAuth-based sign-in for account protection.  </li> <li>Target users: Curious learners,language learners, students, and anyone seeking low-pressure cultural exchange.</li> </ul>"},{"location":"#team-member-roles","title":"Team member roles","text":"<ul> <li>Product Owner &amp; Client:Nathan (Responsible for defining the product vision and prioritizing features.)</li> <li>Scrum Master:Diana (Facilitates the Scrum process, leads meetings, and ensures the team stays on track.)</li> <li>Team:The group of individuals who develop, test, and support the product, include:<ul> <li>Keevon Jacobs</li> <li>Makomane Tau</li> <li>Ponani Ngobeni</li> <li>Khethani Vhuthuhawe</li> <li>Smiso Ndlovu</li> <li>Diana Bingani</li> </ul> </li> </ul>"},{"location":"#project-management-methodology","title":"Project Management Methodology","text":"<p>Youtube reference:   Introduction to scrum - https://www.youtube.com/watch?v=9TycLR0TqFA&amp;t=10s</p> <p>Online Book Source   The 2020 Scrum Guide by Schwaber &amp; Sutherland - https://scrumguides.org/scrum-guide.html</p> <ul> <li> <p>We have chosen Agile Scrum as our project management methodology. Scrum is an iterative and collaborative framework that divides the project into short, manageable cycles called sprints. Each sprint produces an incremental release, allowing us to continuously improve the product, respond to feedback, and adapt to changing requirements throughout the development process.</p> </li> <li> <p>Three Key Artifacts in Scrum</p> <ul> <li>Product Backlog: A comprehensive list of all desired features and requirements for the product, including items planned for future sprints.</li> <li>Sprint Backlog: A prioritized list of features and tasks selected from the product backlog for completion during the current sprint.</li> <li>Burn Down Chart: A visual representation of progress, showing how much work remains in the sprint backlog over time.</li> </ul> </li> <li> <p>Three Main Ceremonies</p> <ul> <li>Sprint Planning: All team members meet to discuss user stories, define sprint goals, and estimate the effort required for each task.</li> <li>Weekly Scrum (Daily Stand-up): Team members briefly share what they have completed, what they are currently working on, and any obstacles they are facing</li> <li>Sprint Review / Retrospective: Held at the end of each sprint. The team demonstrates progress to the client and reflects on what went well and what can be improved in future sprints.</li> </ul> </li> <li> <p>Sequence of our project management methodology</p> <ol> <li>Product Backlog</li> <li>Sprint Planning</li> <li>Sprint Backlog</li> <li>Sprint </li> <li>Sprint Review </li> <li>Sprint Retrospective</li> </ol> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Random Matchmaking \u2014 pair users globally with optional filters (language, region/time-zone).  </li> <li>Asynchronous Messaging \u2014 write a \u201cletter\u201d, schedule a delivery delay (e.g., 12 hours).  </li> <li>Cultural Profiles \u2014 short, anonymous fields (age range, hobbies, region, languages).  </li> <li>Inbox / Compose \u2014 thread-based UI for reading and writing letters.  </li> <li>Moderation \u2014 reporting, moderation logs, blocking.  </li> <li>Settings &amp; Safety \u2014 block/report, toggle match preferences, delete account.</li> </ul>"},{"location":"#tech-stack","title":"Tech Stack","text":"<p>See getting-started/tech-stack.md for full details on our frontend, backend, deployment, and development infrastructure choices.</p>"},{"location":"#git-methodology","title":"Git Methodology","text":"<p>See workflow/git-methodology.md for our full branching strategy, workflow, code quality checks, and PR rules.</p>"},{"location":"#architecture-data-model","title":"Architecture &amp; Data Model","text":"<p>See documentation/architecture.md for full details.</p>"},{"location":"#initial-designs","title":"Initial Designs","text":"<p>See the link below for our design prototypes for the core features of the system. https://www.figma.com/proto/9nLRwWxWq9rGt9MRAzd8gs/Virtual-pen-pals?node-id=29-6&amp;t=iS525tzkq7e2lfdT-1&amp;scaling=min-zoom&amp;content-scaling=fixed&amp;page-id=0%3A1&amp;starting-point-node-id=29%3A6</p>"},{"location":"#github-repository-link","title":"GitHub repository link","text":"<p>Access our GitHub repository. https://github.com/usmiso/GlobeTalk.git</p> <p>Summary: GlobeTalk uses a modular architecture with a Next.js frontend, a backend API for matchmaking and messaging, a NoSQL database for storing users, profiles, matches, and messages, and a worker/scheduler for delayed message delivery. The data model is privacy-focused, with anonymous IDs and moderation logs to ensure safety.</p>"},{"location":"#testing-ci","title":"Testing &amp; CI","text":"<p>See workflow/testing.md for full details on our testing strategy, tools, and CI/CD setup.</p> <ul> <li>Jest for unit and integration tests  </li> <li>Testing Library for React component tests  </li> <li>GitHub Actions for CI/CD  </li> <li>Codecov for code coverage reporting  </li> </ul>"},{"location":"#sprint-1-deliverables","title":"Sprint 1 Deliverables","text":"<ul> <li> User authentication (email, Google OAuth)</li> <li> Responsive UI (Next.js + Tailwind CSS)</li> <li> Netlify deployment</li> </ul>"},{"location":"#npm-audit","title":"NPM Audit","text":"<p>In response to recent supply chain attacks on NPM packages, we have conducted a comprehensive security audit of our dependencies. This audit addresses the security vulnerabilities and provides protection measures against compromised packages.</p> <p>Key Areas Covered: - Analysis of recent NPM supply chain attacks (Debug/Chalk and TinyColor incidents) - Assessment of our package dependencies for compromise - Implementation of protective measures against upstream package infections - Automated security testing tools for continuous monitoring</p> <p>For the complete security audit report, including detailed vulnerability assessments, compromised package analysis, and implemented security measures, see: NPM Audit Report</p>"},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Fork the repo and clone locally</li> <li>Create a new branch (<code>git checkout -b feature/my-feature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add feature'</code>)</li> <li>Push to GitHub and open a Pull Request</li> </ol> <p>See CONTRIBUTING.md for more details.</p>"},{"location":"#contact-support","title":"Contact &amp; Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Email: pontshotau097@gmail.com</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See <code>LICENSE</code> for details.</p>"},{"location":"documentation/architecture/","title":"Architecture","text":""},{"location":"documentation/architecture/#database-documentation","title":"Database Documentation","text":"<p>Choice of Database :  We used Firebase Firestore as our project\u2019s database.</p> <ul> <li> <p>Justification: Firestore was chosen because it is a flexible, cloud-based NoSQL database that integrates seamlessly with Firebase Authentication and other Firebase services. It provides real-time data synchronization, which is essential for responsive user experiences. In addition, Firestore\u2019s scalability and serverless nature reduce the need for manual database management.</p> </li> <li> <p>Docs: https://firebase.google.com/docs/firestore</p> </li> </ul> <p>Database Schema :</p> <p>Our schema is organized into collections and documents rather than relational tables. Below is the current structure:</p> <ul> <li> <p>Chats Collection <pre><code>chats collection\n{\n    \"chatID\": \"string\",\n    \"createdAt\": timestamp,\n    \"messages\": (array)[\n        {\n            \"delaySeconds\": number,\n            \"deliveryTime\": number,\n            \"sender\": \"string\",\n            \"sentAt\": number,\n            \"text\": \"string\"\n        },\n        {\n            \"delaySeconds\": number,\n            \"deliveryTime\": number,\n            \"sender\": \"string\",\n            \"sentAt\": number,\n            \"text\": \"string\"\n        },\n        {\n            \"delaySeconds\": number,\n            \"deliveryTime\": number,\n            \"sender\": \"string\",\n            \"sentAt\": number,\n            \"text\": \"string\"\n        }\n    ],\n    \"users\": [\n        \"string\",\n        \"string\"\n    ]\n}\n</code></pre></p> </li> <li> <p>Match Collection <pre><code>match collection\n{\n    \"matchID\": \"string\",\n    \"user1\": \"string\",\n    \"user2\": \"string\",\n}\n</code></pre></p> </li> <li> <p>Profiles Collection</p> </li> </ul> <pre><code>profiles collection\n{\n    \"avatarUrl\": \"string-Generated via DiceBear\",\n    \"hobbies\": \"array\",\n    \"intro\": \"string\",\n    \"languages\": \"string\",\n    \"timezone\": \"string\",\n    \"userID\": \"string\"\n}\n</code></pre> <ul> <li> <p>Reports Collection <pre><code>reports collection\n{\n    \"chatID\": \"string\",\n    \"message\": {\n        \"delaySeconds\": \"number\",\n        \"deliveryTime\": \"number\",\n        \"sender\": \"string\",\n        \"sentAt\": \"number\",\n        \"text\": \"string\"\n    },\n    \"reason\": \"string\",\n    \"reportedAt\": \"number\",\n    \"reporter\": \"string\",\n    \"status\": \"string\",\n}\n</code></pre></p> </li> <li> <p>Users Collection</p> </li> </ul> <pre><code>users collection\n{\n    \"userID\": \"string\",\n    \"createdAt\": \"timestamp\",\n\n}\n</code></pre> <p>Deployment Information</p> <ul> <li>Frontend Deployment:</li> </ul> <pre><code>o Hosted on Netlify for fast global delivery.\no Frontend communicates with backend via API calls to Railway.\n</code></pre> <ul> <li> <p>Backend Deployment: <pre><code>o Hosted on Railway.\no Backend (Express.js) connects to Firestore using the Firebase Admin SDK.\n</code></pre></p> </li> <li> <p>Database Deployment: <pre><code>o Firestore is fully managed in the cloud by Firebase.\no No manual server provisioning is needed.\no Authentication and security rules are managed through Firebase Console.\n</code></pre></p> </li> </ul>"},{"location":"documentation/Features/feature1/","title":"Feature 1","text":""},{"location":"documentation/Features/feature1/#profile","title":"Profile","text":"<p>  The User Profile page allows users to create, customize, and update their personal information in an intuitive interface. After authentication, the system retrieves the user\u2019s stored data from Firebase and the backend API, including their username, avatar, bio, hobbies, languages, timezone, and favorite activities. Users can edit or add details such as their introduction, age range, country, and common sayings to express their personality and culture. Dynamic dropdowns and custom input fields make it easy to add new hobbies or languages, while a live preview displays all updates instantly. Once saved, the profile data is securely stored through the API. This feature helps personalize the platform experience and enhances global connections by allowing users to showcase their interests, background, and individuality.</p>"},{"location":"documentation/Features/feature1/#dashboard","title":"Dashboard","text":"<p>  The Dashboard serves as the user\u2019s central hub, giving an overview of their global pen pal activity and personal progress on the platform. Once authenticated, users are greeted by name and can view their profile information, including avatar, username, timezone, and join date. The page dynamically loads data from Firebase and the backend API, displaying real-time statistics such as total letters sent, active pen pals, countries connected, and average response time. Users can also view their selected languages and hobbies, each represented as interactive tags. The dashboard includes a visual monthly activity tracker, showing progress toward a 20-letter goal, along with a count of favorite letters. The Recent Activity section lists the user\u2019s latest interactions \u2014 such as letters sent, received, or new matches \u2014 with timestamps and color-coded markers for clarity. At the bottom, Quick Action cards allow users to instantly navigate to key areas: finding a new pen pal, writing or checking letters, and editing their profile. Overall, the dashboard provides a clean, data-driven overview of engagement, progress, and communication activity, ensuring users stay connected and informed throughout their global correspondence journey.</p>"},{"location":"documentation/Features/feature1/#explorer-page","title":"Explorer Page","text":"<p>  The Cultural Facts section allows users to explore traditions, customs, holidays, and local practices associated with different countries. Using a CSV dataset filtered according to matched users\u2019 countries, the app dynamically displays unique cultural facts drawn from multiple categories, such as food, holidays, and language. Users can refine their search by typing keywords or selecting from specific categories for more focused exploration. To make the experience engaging, the section also includes a Country Quiz that tests users\u2019 knowledge of world cultures with randomized questions. Together, these features transform learning about global diversity into an interactive experience, helping users build cultural awareness and appreciation through discovery and fun participation.</p> <p></p> <p>  The Country Profiles feature gives users an interactive way to explore detailed information about different countries they\u2019ve matched with on the platform. When a user connects with people from other regions, the system automatically detects the time zones associated with those users and maps them to their respective countries. Each profile presents verified data fetched from the REST Countries API, including the national flag, coat of arms, region, population size, local time zone, currency, and primary languages spoken. The list of countries appears on the left panel, and clicking on any of them instantly loads its profile card on the right. This feature provides users with quick cultural and geographical insights about their matches, helping them understand more about the global community they are engaging with.</p>"},{"location":"documentation/Features/feature2/","title":"Feature 2","text":""},{"location":"documentation/Features/feature2/#random-matchmaking","title":"Random Matchmaking","text":""},{"location":"documentation/Features/feature2/#user-experience-and-interface","title":"User Experience and Interface","text":"<p>The random matchmaking feature allows users to discover new connections based on their preferences for timezone and language. When you visit the matchmaking page, you'll see a clean interface with search boxes for filtering by timezone and language. You can choose to filter by just timezone, just language, or both criteria to find your ideal match. The system requires at least one filter to be selected before you can search. Once you click \"Find Match,\" the system searches through all available users who meet your criteria and randomly selects one compatible person for you to connect with. The matched user's profile displays their avatar, username, name, language, timezone, age range, hobbies, and other details to help you decide if you'd like to start a conversation.</p>"},{"location":"documentation/Features/feature2/#matching-algorithm-and-process","title":"Matching Algorithm and Process","text":"<p>The random matchmaking system works by first excluding users you've already matched with previously, ensuring you meet new people each time. The algorithm scans through all user profiles in the database and filters them based on your selected timezone and language preferences. If you specify a timezone, it only shows users from that exact timezone. For language filtering, it matches users who either speak that specific language as their primary language or have it listed among their known languages. Once all compatible users are identified, the system uses a random number generator to select one user from the filtered pool, ensuring each search gives you a different potential match. After viewing the match details, you can choose between a one-time chat or long-term chat option before proceeding to start your conversation\u00a0in\u00a0the\u00a0inbox.</p>"},{"location":"documentation/Features/feature3/","title":"Feature 3","text":""},{"location":"documentation/Features/feature3/#inbox-chatting-system","title":"Inbox Chatting System","text":""},{"location":"documentation/Features/feature3/#interface-and-navigation","title":"Interface and Navigation","text":"<p>The inbox serves as your central hub for all pen pal conversations, featuring a responsive design that adapts to both desktop and mobile devices. On desktop, you'll see a collapsible sidebar on the left showing all your active pen pal conversations, each displaying the friend's avatar, username, and a preview of the last message. The main chat area takes up the right side, where you can view and participate in conversations. On mobile, the interface switches between a list view of all your pen pals and the individual chat view. The sidebar can be toggled open or closed, and if you have no pen pals yet, you'll see an empty state with a button to find new matches through the matchmaking system.</p>"},{"location":"documentation/Features/feature3/#letter-based-messaging-system","title":"Letter-Based Messaging System","text":"<p>The inbox features a unique letter-based messaging system that simulates traditional pen pal correspondence. When you compose a message, you can set delivery delays ranging from 1 minute to 1 day, creating an authentic pen pal experience where letters don't arrive instantly. Messages are displayed as beautifully formatted letters with decorative borders, headers showing sender/recipient information, and delivery timestamps. Each letter shows a countdown timer until it unlocks, and once delivered, you can download individual letters or entire chat transcripts as PDFs. The system includes real-time polling to automatically fetch new messages every 3 seconds, ensuring you don't miss any correspondence. You can reply to letters through a modal composer that lets you set delivery delays and write up to 1000 characters per message, maintaining the thoughtful, deliberate nature of traditional pen pal\u00a0communication.</p>"},{"location":"documentation/Features/feature4/","title":"Feature 4","text":""},{"location":"documentation/Features/feature4/#reporting-a-user","title":"Reporting a User","text":"<p>The Report button appears on received, unlocked letters (never on your own messages). Tapping it opens a modal where you choose a reason\u2014defaulting to \u201cSpam or scam\u201d\u2014or select \u201cOther\u201d to provide custom details. The app automatically looks up both participants\u2019 usernames and packages the report with the chat ID, the exact message content, reporter and reported user IDs/usernames, and your chosen reason. Submissions are validated to prevent empty reasons, then securely sent to the server for review without interrupting your conversation. On success, a confirmation popup briefly appears; on cancel, the modal simply closes. Reports are designed to be quick to file (one click from the letter footer), visible only when a message has actually been delivered, and unavailable for your own messages\u2014helping keep the experience respectful while ensuring moderation has the context\u00a0needed\u00a0to\u00a0act. </p>"},{"location":"documentation/Features/feature4/#admin-page","title":"Admin Page","text":""},{"location":"documentation/Features/feature4/#how-it-works","title":"How it works","text":"<p>The reports page is a restricted administrative dashboard accessible only to users with the specific email \"gamersboysa@gmail.com\". The system performs strict authentication checks, redirecting unauthorized users immediately. Once authorized, the page displays a comprehensive moderation interface showing all user-submitted reports in a detailed table format. The dashboard includes real-time polling every 5 seconds to automatically refresh data, with intelligent failure handling that pauses polling after 3 consecutive errors to prevent system overload.</p>"},{"location":"documentation/Features/feature4/#report-management-and-moderation-actions","title":"Report Management and Moderation Actions","text":"<p>Each report displays essential information including a unique report ID, offense type, reporter and reported usernames, the actual message content, submission date, current status, and automatically calculated severity levels (high for harassment/hate/threats, medium for inappropriate content, low for others). Moderators can validate reports (marking them as resolved and incrementing the reported user's violation count) or invalidate them (rejecting false reports). The system tracks violation counts per user and automatically suggests blocking users who accumulate 3+ violations. When validating reports, the system records detailed violation entries including report ID, reason, chat context, message content, reporter information, and timestamps. The interface prioritizes pending reports at the top, with resolved reports sorted below, and includes error handling for server connectivity issues with clear user feedback about backend\u00a0availability.</p>"},{"location":"documentation/uml/sprint1/","title":"Sprint 1","text":""},{"location":"documentation/uml/sprint1/#use-case-diagram","title":"Use case diagram","text":""},{"location":"documentation/uml/sprint1/#login","title":"Login","text":"<p> Note that the system in this case above for the use case diagram is the third party authenticator which is firebase.</p>"},{"location":"documentation/uml/sprint1/#sequence-diagrams","title":"Sequence diagrams","text":""},{"location":"documentation/uml/sprint1/#forgetpassword","title":"Forgetpassword","text":""},{"location":"documentation/uml/sprint1/#login_1","title":"Login","text":""},{"location":"documentation/uml/sprint1/#signup","title":"SignUp","text":""},{"location":"documentation/uml/sprint1/#physical-view-deployment-diagram","title":"Physical View (Deployment Diagram)","text":""},{"location":"getting-started/Installation/","title":"Testing &amp; CI","text":""},{"location":"getting-started/dev-setup/","title":"Development Guides","text":""},{"location":"getting-started/dev-setup/#nextjs","title":"Next.js","text":"<ol> <li>Install Node.js (LTS version recommended).</li> <li>Create the app:</li> </ol> <p><pre><code>npx create-next-app@latest my-app\ncd my-app\n</code></pre> 3. Run the development server <pre><code>npm run dev\n</code></pre> 4. Open in browser <pre><code>Go to http://localhost:3000\n</code></pre> 5. Start building \u2192 Edit files in the pages/ or app/ directory.</p>"},{"location":"getting-started/dev-setup/#github-repo","title":"GitHub repo","text":"<ol> <li>Create a new repo on GitHub (choose name, description, public)</li> <li>In VScode terminal Initialize Git in your project <pre><code>git init\n</code></pre></li> <li>Add remote origin <pre><code>git remote add origin https://github.com/USERNAME/REPO-NAME.git\n</code></pre></li> <li>Stage and commit files <pre><code>git add .\ngit commit -m \"Initial commit\"\n</code></pre></li> <li>Push to GitHub <pre><code>git branch -M main\ngit push -u origin main\n</code></pre></li> </ol>"},{"location":"getting-started/dev-setup/#github-pages","title":"GitHub pages","text":"<ol> <li>Have a GitHub repo with your project code</li> <li>Push code to main branch (or another branch if you prefer).</li> <li>Enable GitHub Pages <pre><code>Go to Settings \u2192 Pages in your repo.\nUnder Source, select the branch (main) and folder (/root or /docs)\n</code></pre></li> <li>Save settings \u2192 GitHub will give you a live URL</li> <li>Access your site once the deployment finishes</li> </ol>"},{"location":"getting-started/dev-setup/#netlify-deployment","title":"Netlify Deployment","text":"<ol> <li>Create a Netlify account (or log in).</li> <li>Connect your GitHub repo <pre><code>Click New Site \u2192 Import from Git \u2192 Select your repo\n</code></pre></li> <li>Configure build settings <pre><code>Build command: npm run build\nPublish directory: out (for Next.js static export) or build (for React)\n</code></pre></li> <li>Deploy site \u2192 Netlify will build and give you a live URL.</li> <li>Optional \u2192 Set up custom domain in Netlify settings.</li> </ol>"},{"location":"getting-started/dev-setup/#firebase-auth","title":"Firebase auth","text":"<ol> <li>Create a Firebase project at Firebase Console.</li> <li>Add a web app \u2192 Get Firebase config (apiKey, authDomain, etc.).</li> <li>Install Firebase SDK in your project: <pre><code>npm install firebase\n</code></pre></li> <li>Initialize Firebase in your project: <pre><code>import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nconst firebaseConfig = { /* your config */ };\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n</code></pre></li> <li>Enable auth methods in Firebase Console \u2192 Authentication \u2192 Sign-in method (Email/Password, Google, etc.).</li> <li>Use Firebase Auth to register, login, and manage users in your app.</li> </ol>"},{"location":"getting-started/dev-setup/#firestore","title":"Firestore","text":"<ol> <li>Create a Firebase project (or use an existing one).</li> <li>Enable Firestore in the Firebase Console \u2192 Firestore Database \u2192 Create database.</li> <li>Install Firebase SDK (if not already done)</li> <li>Initialize Firestore in your project: <pre><code>import { getFirestore } from \"firebase/firestore\";\nconst db = getFirestore(app); // app is your initialized Firebase app\n</code></pre></li> <li>Use Firestore to read/write data: <pre><code>Add document: addDoc(collection(db, \"users\"), { name: \"John\" })\nGet documents: getDocs(collection(db, \"users\"))\nUpdate document: updateDoc(doc(db, \"users\", docId), { age: 30 })\nDelete document: deleteDoc(doc(db, \"users\", docId))\n</code></pre></li> </ol>"},{"location":"getting-started/dev-setup/#nextjs-express-for-a-simple-api","title":"Next.js + Express for a simple API","text":"<ol> <li>Install dependencies (if not done already): <pre><code>npm install express firebase-admin\n</code></pre></li> <li>Create server.js in your project root: <pre><code>import express from \"express\";\nimport { initializeApp, applicationDefault } from \"firebase-admin/app\";\nimport { getFirestore } from \"firebase-admin/firestore\";\n\nconst app = express();\napp.use(express.json()); // for parsing JSON bodies\n\n// Initialize Firebase Admin\ninitializeApp({\n  credential: applicationDefault(),\n});\n\nconst db = getFirestore();\n\n// Example API route: GET all users\napp.get(\"/api/users\", async (req, res) =&gt; {\n  try {\n    const snapshot = await db.collection(\"users\").get();\n    const users = snapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() }));\n    res.json(users);\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});\n\n// Example API route: POST a new user\napp.post(\"/api/users\", async (req, res) =&gt; {\n  try {\n    const { name, age } = req.body;\n    const docRef = await db.collection(\"users\").add({ name, age });\n    res.status(201).json({ id: docRef.id, name, age });\n  } catch (err) {\n    res.status(500).json({ error: err.message });\n  }\n});\n\n// Start server\nconst PORT = process.env.PORT || 3001;\napp.listen(PORT, () =&gt; console.log(`Server running on port ${PORT}`));\n</code></pre></li> <li>Run your server: <pre><code>node server.js\n</code></pre> GET users: http://localhost:3001/api/users and POST new user: Send JSON { \"name\": \"John\", \"age\": 30 } to the same URL.</li> </ol>"},{"location":"getting-started/dev-setup/#third-party-code-documentation","title":"Third Party Code Documentation","text":"<p>Our project makes use of several third-party libraries and APIs to improve efficiency, provide essential functionality, and ensure maintainability. Below is a list of all important third-party code used, with documentation links and justifications.</p> <p>Frontend(Next.js+React)</p> <ul> <li>Next.js (v14) <pre><code>o Docs: https://nextjs.org/docs\no Justification: Next.js was chosen for its powerful server-side rendering\nand routing features. It simplifies building scalable web applications and\nprovides built-in optimizations for performance.\n</code></pre></li> <li>React (v18) <pre><code>o Docs: https://react.dev/\no Justification: React is the core library for building reusable UI\ncomponents. It enables efficient state management and component-\ndriven development.\n</code></pre></li> <li>Tailwind CSS (v3) <pre><code>o Docs: https://tailwindcss.com/docs\no Justification: Tailwind CSS provides a utility-first approach to styling,\nmaking it faster to build and maintain consistent user interfaces.\n</code></pre></li> <li>Next.js built-in modules: <pre><code>o next/link (routing between pages)\no next/navigation (client-side navigation APIs)\no next/image (optimized image rendering)\no Docs: Next.js Components\no Justification: These built-in features streamline navigation, routing, and\nimage optimization within the app.\n</code></pre></li> </ul> <p>APIs / External Services</p> <ul> <li>DiceBear Avatars API <pre><code>o Docs: https://www.dicebear.com/styles/\no Justification: Used for generating random avatars for users, improving\npersonalization and user experience without needing manual uploads.\n</code></pre></li> <li>RandomUser API (randomuser.me) <pre><code>o Docs: https://randomuser.me/documentation\no Justification: Used to generate random user profiles during testing and\ndevelopment, ensuring realistic test data\n</code></pre></li> </ul> <p>Backend (Node.js + Express)</p> <ul> <li>Express.js (v4) <pre><code>o Docs: https://expressjs.com/\no Justification: Express provides a lightweight and flexible framework for\nbuilding backend REST APIs, handling routes, and connecting to the\nfrontend\n</code></pre></li> <li>CORS <pre><code>o Docs: https://www.npmjs.com/package/cors\no Justification: Ensures secure cross-origin communication between\nfrontend and backend, preventing browser security errors.\n</code></pre></li> <li>Firebase Admin SDK <pre><code>o Docs: https://firebase.google.com/docs/admin/setup\no Justification: Provides secure access to Firebase services such as authentication and Firestore database management from the backend.\n</code></pre></li> </ul>"},{"location":"getting-started/tech-stack/","title":"Tech stack","text":""},{"location":"getting-started/tech-stack/#tech-stack-ralational-database","title":"Tech Stack &amp; Ralational Database","text":"<p>Frontend</p> <ul> <li> <p>Next.js: Modern UI Library with hooks and context     Youtube reference:</p> <ul> <li>Why next.js over react - https://www.youtube.com/watch?v=msJicleNHkA</li> <li>Routing: Next.js provides a built-in file-based routing system that automatically maps files in the pages directory to URLs, making navigation intuitive without extra configuration.</li> <li>Code-Splitting: It automatically splits JavaScript by page, so users only download the code needed for the page they\u2019re viewing, improving load times.</li> <li>Pre-Rendering: Next.js can generate HTML for each page at build time (SSG) or on request (SSR), boosting SEO and performance compared to client-side rendering</li> <li>API Support: It allows you to create serverless API routes directly in the same project, removing the need for a separate backend for simple server-side logic</li> </ul> </li> <li> <p>Tailwind CSS: Utility-first CSS framework     Youtube reference:</p> <ul> <li>Why tailwind css - https://www.youtube.com/watch?v=pKrPeUQiDu4</li> <li>Utility-First Styling: Tailwind offers a wide range of low-level utility classes that let you style elements directly in your markup without writing separate CSS files.</li> <li>Customization: It\u2019s highly configurable via a single config file, allowing you to define colors, spacing, typography, and breakpoints to match your design system.</li> <li>Responsive Design: Built-in responsive variants make it easy to create designs that adapt seamlessly across different screen sizes.</li> <li>Performance: Tailwind automatically purges unused CSS in production, keeping file sizes small and load times fast.</li> </ul> </li> <li>React Query</li> <li>React Context API</li> </ul> <p>Backend</p> <ul> <li>Next.js API routes  </li> <li>Firebase</li> <li>Backend-as-a-Service Platform<ul> <li>Firebase Auth: Firebase Authentication provides ready-to-use sign-in methods (email, password, social logins) with secure session management, reducing the need to build auth from scratch.</li> <li>Firestore: A scalable NoSQL database that syncs data in real-time across clients, making it ideal for dynamic and collaborative apps.  </li> </ul> </li> <li>Express.js</li> <li>Minimal and Flexible: Express provides a lightweight core with the flexibility to add only the middleware and features you need.</li> <li>Routing: Offers a simple yet powerful routing system to handle different HTTP methods and URL patterns.</li> <li>Middleware Support: Easily integrates third-party or custom middleware to handle requests, responses, authentication, and more.</li> <li>REST API Development: Well-suited for building robust and scalable RESTful APIs quickly with minimal boilerplate..</li> </ul> <p>Deployment</p> <ul> <li>Netlify <ul> <li>Continuous Deployment: Automatically builds and deploys your site whenever you push changes to your Git repository.</li> <li>Global CDN: Delivers your site through a fast, globally distributed content delivery network for low-latency access worldwide</li> <li>Serverless Functions: Allows you to run backend logic without maintaining a server, ideal for lightweight APIs and dynamic features.</li> <li>Instant Rollbacks: Lets you revert to any previous deploy instantly, ensuring quick recovery from issues.</li> </ul> </li> </ul> <p>Development Infrastructure</p> <ul> <li>GitHub for version control  </li> <li>GitHub Actions for CI (test.yml)<ul> <li>Jest for unit testing</li> <li>Codecov for Code Coverage</li> </ul> </li> <li>Hosting: Netlify (One-click deployment)</li> <li>Secrets &amp; Environment management: Github Secrets &amp; Netlify Environment Variables</li> <li>Docs site: GitHub Pages (MkDocs)</li> </ul>"},{"location":"reports/npm-audit/","title":"Security Audit Report: NPM Supply Chain Attacks and GlobeTalk Project","text":"<p>This report examines two recent NPM supply\u2011chain attacks (the \u201cNx/s1ngularity\u201d attack of Aug 26\u201327, 2025 and the \u201cShai\u2011Hulud\u201d worm of Sept 15, 2025), identifies the compromised packages and versions in each incident, audits the GlobeTalk project for these packages (including transitive dependencies), and recommends mitigations against such supply\u2011chain attacks. Citations to official advisories and analyses are provided throughout.</p>"},{"location":"reports/npm-audit/#1-nx-s1ngularity-supplychain-attack-aug-2627-2025","title":"1) Nx \u201cs1ngularity\u201d Supply\u2011Chain Attack (Aug 26\u201327, 2025)","text":""},{"location":"reports/npm-audit/#cause-and-mechanism","title":"Cause and mechanism","text":"<p>Attackers gained access to an npm publish token for the Nx package (a popular monorepo build/CI tool). Using this stolen token, they published malicious versions of Nx and related libraries to the npm registry. The malicious packages included a postinstall script that scanned the developer\u2019s machine for secrets (e.g., GitHub tokens, SSH keys, cloud API keys) and exfiltrated them to a newly created GitHub repository (reported by multiple sources). The compromised versions were published between ~6:32 PM and 10:44 PM EDT on Aug 26, 2025; afterward, the Nx team revoked the token and removed the malicious releases.</p>"},{"location":"reports/npm-audit/#compromised-packages-and-versions-as-reported","title":"Compromised packages and versions (as reported)","text":"<ul> <li><code>@nrwl/nx</code> (also published as <code>nx</code>): 20.9.0, 20.10.0, 20.11.0, 20.12.0, 21.5.0, 21.6.0, 21.7.0, 21.8.0</li> <li><code>@nx/devkit</code>: 20.9.0, 21.5.0</li> <li><code>@nx/enterprise-cloud</code>: 3.2.0</li> <li><code>@nx/eslint</code>: 21.5.0</li> <li><code>@nx/js</code>: 20.9.0, 21.5.0</li> <li><code>@nx/key</code>: 3.2.0</li> <li><code>@nx/node</code>: 20.9.0, 21.5.0</li> <li><code>@nx/workspace</code>: 20.9.0, 21.5.0</li> </ul> <p>These versions were subsequently removed from npm and replaced with clean releases.</p>"},{"location":"reports/npm-audit/#2-shaihulud-selfpropagating-worm-sept-15-2025","title":"2) Shai\u2011Hulud Self\u2011Propagating Worm (Sept 15, 2025)","text":""},{"location":"reports/npm-audit/#cause-and-mechanism_1","title":"Cause and mechanism","text":"<p>The Shai\u2011Hulud attack embedded a self\u2011propagating malware payload in npm packages. Attackers compromised one or more maintainer accounts and published versions of many packages containing malicious JavaScript. On installation (primarily Linux/macOS), the payload scavenged credentials (GitHub tokens, AWS/GCP/Azure keys, npm auth tokens, etc.) and exfiltrated them to an attacker\u2011controlled endpoint and by creating a public \u201cShai\u2011Hulud\u201d GitHub repository containing the stolen data. The malware also queried npm for other packages owned by the same maintainer and auto\u2011published infected updates, creating a chain reaction. Over 500 packages were confirmed compromised.</p>"},{"location":"reports/npm-audit/#example-compromised-packages-subset","title":"Example compromised packages (subset)","text":"<ul> <li><code>@ctrl/tinycolor</code>: 4.1.1, 4.1.2</li> <li><code>ngx-bootstrap</code>: 18.1.4, 19.0.3\u201319.0.5, 20.0.3\u201320.0.5</li> </ul> <p>For the full list (500+ packages), refer to incident analyses and advisories.</p>"},{"location":"reports/npm-audit/#3-globetalk-project-dependency-audit","title":"3) GlobeTalk Project Dependency Audit","text":"<p>We audited the GlobeTalk project (<code>package.json</code> and <code>package-lock.json</code>) to check for usage of the above compromised packages (direct or transitive). Following best\u2011practice guidance (e.g., inspect lockfiles and installed trees), we searched for all listed names and versions. No compromised packages or malicious versions were found. In particular, none of the Nx (<code>@nrwl/nx</code>, <code>nx</code>, <code>@nx/*</code>) or Shai\u2011Hulud package names appear in GlobeTalk\u2019s dependency tree. GlobeTalk depends on libraries such as Next, React, Firebase, etc., at recent versions not listed in any advisory. Recursive scanning (via tooling and lockfile parsing) confirmed that none of the ~500 Shai\u2011Hulud or Nx packages appear at any level. Summary: GlobeTalk is not affected by these incidents, and no immediate vulnerability related to them is present.</p>"},{"location":"reports/npm-audit/#4-recommended-upstream-dependency-attack-mitigations","title":"4) Recommended Upstream (Dependency) Attack Mitigations","text":"<ul> <li>Pin and freeze dependencies: Always use lockfiles and build tools that honor them (e.g., <code>npm ci</code>). Avoid loose semver ranges (<code>^</code> or <code>~</code>) in production. Pin to known\u2011good versions, especially prior to known compromise dates.</li> <li>Allow\u2011list registries and publishers: Use private npm registries or allow\u2011list organizational scopes and version ranges to prevent unvetted packages from being installed.</li> <li>Use SBOM/provenance checks: Generate a Software Bill of Materials (SBOM) and adopt provenance frameworks (e.g., SLSA) to verify packages come from expected sources.</li> <li>Continuous scanning and alerts: Employ automated SCA tools (npm audit, Dependabot, Snyk, etc.). Monitor build logs and network calls; block known exfiltration domains when incidents arise.</li> <li>Dependency hygiene: Regularly review and remove unused or untrusted dependencies. Prefer well\u2011maintained, widely reviewed libraries.</li> <li>Artifact and cache management: Use a private proxy/cache (e.g., npm Enterprise, Verdaccio) to control and log package downloads. Purge/rebuild artifacts promptly after a disclosed compromise.</li> </ul>"},{"location":"reports/npm-audit/#5-recommended-sourcelevel-attack-mitigations","title":"5) Recommended Source\u2011Level Attack Mitigations","text":"<ul> <li>Multi\u2011factor authentication (MFA): Require phishing\u2011resistant MFA on developer and maintainer accounts (npm, GitHub, cloud providers, etc.).</li> <li>Credential hygiene: Rotate/revoke developer tokens/keys immediately upon suspicion or incident disclosure.</li> <li>Strict code reviews and approvals: Enforce mandatory peer review and approvals for code changes and releases. Limit who can publish.</li> <li>Branch/CI protections: Use protected branches, least\u2011privilege service accounts, and monitored, ephemeral CI environments. Prefer building with <code>npm ci</code> from a lockfile.</li> <li>Limit install\u2011time scripts: Disable or sandbox <code>postinstall</code> and similar scripts where feasible; audit any required scripts closely.</li> <li>Package signing/provenance: Enable cryptographic signing and supply\u2011chain provenance (e.g., SLSA) so builds and packages can be verified.</li> <li>Update policies: Use a short \u201ccool\u2011down\u201d period before adopting new package versions; monitor for ownership changes and unexpected publishes.</li> </ul>"},{"location":"reports/npm-audit/#6-audit-script-example","title":"6) Audit Script (example)","text":"<p>The following Python script programmatically checks a project for known compromised packages. Provide a list of package names and scan <code>package.json</code> and <code>package-lock.json</code> for direct and transitive occurrences.</p> <pre><code>import json\n\ndef load_json(path):\n   with open(path, 'r', encoding='utf-8') as f:\n      return json.load(f)\n\ndef check_compromised(compromised_list, pkg_json_path, pkg_lock_path):\n   pkg_json = load_json(pkg_json_path)\n   pkg_lock = load_json(pkg_lock_path)\n\n   # Collect direct dependencies\n   deps = set(pkg_json.get('dependencies', {}).keys()) | set(pkg_json.get('devDependencies', {}).keys())\n\n   # Collect all installed package names from lockfile (npm v7+ format)\n   installed = set()\n   for info in pkg_lock.get('packages', {}).values():\n      name = info.get('name')\n      if name:\n         installed.add(name)\n\n   # Check for compromised packages\n   found = []\n   for comp in compromised_list:\n      if comp in deps:\n         found.append((comp, 'direct'))\n      elif comp in installed:\n         found.append((comp, 'transitive'))\n   return found\n\nif __name__ == \"__main__\":\n   compromised = [\n      \"@nrwl/nx\", \"nx\", \"@nx/devkit\", \"@ctrl/tinycolor\", \"ngx-bootstrap\",\n   ]\n   results = check_compromised(compromised, 'package.json', 'package-lock.json')\n   if results:\n      print(\"Compromised packages detected:\")\n      for pkg, scope in results:\n         print(f\"- {pkg} ({scope} dependency)\")\n   else:\n      print(\"No compromised packages found in dependencies.\")\n</code></pre>"},{"location":"reports/npm-audit/#quick-reference-table","title":"Quick reference table","text":"Attack Date Examples of affected packages Nx (s1ngularity) Aug 26\u201327, 2025 <code>@nrwl/nx</code>/<code>nx</code> (20.9.0\u201321.8.0), <code>@nx/devkit</code> (20.9.0, 21.5.0), <code>@nx/workspace</code> (20.9.0, 21.5.0), others Shai\u2011Hulud worm Sept 15, 2025 500+ packages, e.g., <code>@ctrl/tinycolor</code> (4.1.1\u20134.1.2), <code>ngx-bootstrap</code> (18.1.4, 19.0.3\u201319.0.5, 20.0.3\u201320.0.5)"},{"location":"reports/npm-audit/#7-supply-chain-audit-report-automated-snapshot","title":"7) Supply Chain Audit Report (Automated Snapshot)","text":"<p>Generated: 2025-09-30T11:05:18.954Z</p>"},{"location":"reports/npm-audit/#input-compromised-packages","title":"Input (Compromised Packages)","text":"<ul> <li>backslash (=0.2.1)</li> <li>chalk-template (=1.1.1)</li> <li>supports-hyperlinks (=4.1.1)</li> <li>has-ansi (=6.0.1)</li> <li>simple-swizzle (=0.2.3)</li> <li>color-string (=2.1.1)</li> <li>error-ex (=1.3.3)</li> <li>color-name (=2.0.1)</li> <li>is-arrayish (=0.3.3)</li> <li>slice-ansi (=7.1.1)</li> <li>color-convert (=3.1.1)</li> <li>wrap-ansi (=9.0.1)</li> <li>ansi-regex (=6.2.1)</li> <li>supports-color (=10.2.1)</li> <li>strip-ansi (=7.1.1)</li> <li>chalk (=5.6.1)</li> <li>debug (=4.4.2)</li> <li>ansi-styles (=6.2.2)</li> <li>@ctrl/tinycolor (=4.1.1 || =4.1.2)</li> <li>angulartics2 (=14.1.2)</li> <li>@ctrl/deluge (=7.2.2)</li> <li>@ctrl/golang-template (=1.4.3)</li> <li>@ctrl/magnet-link (=4.0.4)</li> <li>@ctrl/ngx-codemirror (=7.0.2)</li> <li>@ctrl/ngx-csv (=6.0.2)</li> <li>@ctrl/ngx-emoji-mart (=9.2.2)</li> <li>@ctrl/ngx-rightclick (=4.0.2)</li> <li>@ctrl/qbittorrent (=9.7.2)</li> <li>@ctrl/react-adsense (=2.0.2)</li> <li>@ctrl/shared-torrent (=6.3.2)</li> <li>@ctrl/torrent-file (=4.1.2)</li> <li>@ctrl/transmission (=7.3.1)</li> <li>@ctrl/ts-base32 (=4.0.2)</li> <li>encounter-playground (=0.0.5)</li> <li>json-rules-engine-simplified (=0.2.4 || =0.2.1)</li> <li>koa2-swagger-ui (=5.11.2 || =5.11.1)</li> <li>@nativescript-community/gesturehandler (=2.0.35)</li> <li>@nativescript-community/sentry (=4.6.43)</li> <li>@nativescript-community/text (=1.6.13)</li> <li>@nativescript-community/ui-collectionview (=6.0.6)</li> <li>@nativescript-community/ui-drawer (=0.1.30)</li> <li>@nativescript-community/ui-image (=4.5.6)</li> <li>@nativescript-community/ui-material-bottomsheet (=7.2.72)</li> <li>@nativescript-community/ui-material-core (=7.2.76)</li> <li>@nativescript-community/ui-material-core-tabs (=7.2.76)</li> <li>ngx-color (=10.0.2)</li> <li>ngx-toastr (=19.0.2)</li> <li>ngx-trend (=8.0.1)</li> <li>react-complaint-image (=0.0.35)</li> <li>react-jsonschema-form-conditionals (=0.3.21)</li> <li>react-jsonschema-form-extras (=1.0.4)</li> <li>rxnt-authentication (=0.0.6)</li> <li>rxnt-healthchecks-nestjs (=1.0.5)</li> <li>rxnt-kue (=1.0.7)</li> <li>swc-plugin-component-annotate (=1.9.2)</li> <li>ts-gaussian (=3.0.6)</li> </ul>"},{"location":"reports/npm-audit/#findings","title":"Findings","text":"<ul> <li>No matches found in installed dependency graph.</li> </ul>"},{"location":"reports/npm-audit/#recommendations","title":"Recommendations","text":"<ul> <li>Keep dependencies pinned and lockfile committed.</li> <li>Enable CI guardrails (see Measures below).</li> </ul>"},{"location":"reports/npm-audit/#measures-to-avoid-infection-from-upstream-packages","title":"Measures to avoid infection from upstream packages","text":"<ul> <li>Pin exact versions; commit package-lock.json; use \"npm ci\".</li> <li>Enforce provenance/sig verification for npm publishes.</li> <li>Disable lifecycle scripts in CI: <code>npm ci --ignore-scripts</code>.</li> <li>Restrict registry to https://registry.npmjs.org/.</li> <li>Enable Dependabot/Snyk/Socket alerts.</li> <li>Use <code>overrides</code> to force safe transitive versions.</li> </ul>"},{"location":"reports/npm-audit/#measures-to-avoid-infection-from-source","title":"Measures to avoid infection from source","text":"<ul> <li>Code review and least-privilege on repo/CI tokens.</li> <li>Secret scanning and pre-commit hooks.</li> <li>Run dependency scans on each PR.</li> <li>Sandbox builds; avoid prod secrets on dev machines.</li> <li>Verify integrity fields in the lockfile.</li> </ul> <p>Notes: Replace or augment with exact citations and links from official advisories (e.g., CISA, vendor posts, incident blogs) as desired.</p>"},{"location":"tutorials/advanced/","title":"Advanced Topics","text":"<ul> <li>Random Matchmaking: You can match with any user, based on their langauge or their country</li> <li>Asynchronos Messageing: After user feedback, we decided on chanmgig the Ui from Email UI to Whatsapp UI. Its involves a time delay so that it mimics old postal services</li> <li>Cultural Profiles: We implementaed user Profiles. A process(sequence of steps has to be followed afater signing up to to create you profile which includes generating you profile and username, and filling out your profile information). There is a Explorer page where you can learn interesting information about your penpal's countries. This information includes facts about traditions, food, Customs and so on. There is then a page where you get to learn about countries progiles, such coat of arms, number of languages and what they are, population of that country, ect. And to make the page more interactive, we added a Country quisz which allows you to test your knowlegde about other countired in the world.  </li> <li>Safety and Moderation: This feature will be presneted in sprint 4. But we have started with the implemention of moderation through the admin page. We started implemention of reporting a user from the chat. And look into the IP adress blocking hidden feature.</li> </ul>"},{"location":"tutorials/intro/","title":"Introduction","text":""},{"location":"tutorials/intro/#old-user-interface","title":"Old User Interface","text":"<ul> <li> <p>Old Avatar Username Generator </p> </li> <li> <p>Old Dashboard UI: </p> </li> <li>Old Random Matchmaking page </li> <li>Old Profile Page </li> <li>Old Login/SignUp Page </li> <li>Old User Profile page </li> </ul>"},{"location":"workflow/git-methodology/","title":"Git Methodology","text":""},{"location":"workflow/git-methodology/#git-methodology","title":"Git Methodology","text":"<ul> <li> <p>We follow a main / dev / feature branching strategy:</p> <ul> <li>main: always stable &amp; deployed.</li> <li>dev: integration branch where features are merged.</li> <li>feature/name: each new feature or fix has its own branch.</li> </ul> </li> <li> <p>Workflow:</p> <ol> <li>Switch to latest dev branch</li> <li>Pull latest dev.</li> <li>Create a feature/* branch.</li> <li>Do your changes</li> <li>Run tests</li> <li>Stage &amp; Commit(conventional commits)</li> <li>Pull latest dev to your feature branch</li> <li>Push changes.</li> <li>Open a Pull Request (PR) into dev.</li> <li>After review &amp; testing, merge dev to main.</li> </ol> </li> <li> <p>Code Quality Checks:</p> <ul> <li>Run ESLint (npx eslint . --fix) and Jest tests (npm test) before pushing.</li> <li>GitHub Actions runs CI(tests &amp; lint) checks on every PR.</li> <li>After review, merge dev \u2192 main for releases</li> </ul> </li> <li> <p>Rules:</p> <ul> <li>No direct commits to main.</li> <li>All code goes through PR review.</li> <li>Netlify auto-deploys from main.</li> </ul> </li> </ul>"},{"location":"workflow/meetings/","title":"Meetings","text":""},{"location":"workflow/meetings/#sprint-1-meeting-evidence","title":"Sprint 1 Meeting Evidence","text":"<ul> <li>Meeting 1: Technology Stack &amp; Team Agreements</li> <li>Date: 05 August 2025  </li> <li>Venue: In-person</li> <li>Agenda &amp; Discussions:<ul> <li>Selected technology stack: Next.js, Tailwind CSS (frontend); Firebase, Express.js (backend); Vercel/Netlify (deployment)</li> <li>Tools: GitHub, Trello, WhatsApp, Discord, Figma</li> <li>Team agreement: each member tests their own code</li> </ul> </li> <li> <p>Decisions Made:</p> <ul> <li>GitHub repo under Toure</li> <li>Explore GitHub Pages (Smiso &amp; Diana), test automation (all)</li> <li>Future: folder structure, automation, code coverage</li> </ul> </li> <li> <p>Meeting 2: Task Allocation &amp; Progress Review</p> </li> <li>Date: 6 August 2025  </li> <li>Venue: Online</li> <li>Agenda &amp; Discussions:<ul> <li>Assigned roles:</li> <li>Ponani &amp; Vuthu: Sign Up UI &amp; Login UI</li> <li>Keevon &amp; Smiso: Login, Signup backend</li> <li>Smiso &amp; Toure: Forgot Password backend</li> <li>Ponani &amp; Diana: Homepage UI &amp; responsiveness</li> <li>Set internal deadlines; confirmed all features for Sprint 1</li> </ul> </li> <li>Decisions Made:<ul> <li>Clear task ownership</li> <li>Test features before merging</li> <li>Next sprint: refine features</li> </ul> </li> <li> <p></p> </li> <li> <p>Meeting 3: UI Design &amp; Initial Development</p> </li> <li>Date: 11 August 2025  </li> <li>Venue: In-person</li> <li>Agenda &amp; Discussions:<ul> <li>Reviewed Figma designs (Login, Sign Up, Forgot Password, Homepage)</li> <li>Responsiveness requirements</li> <li>Task breakdown: UI development, functionality implementation</li> </ul> </li> <li> <p>Decisions Made:</p> <ul> <li>Finalized UI designs for Sprint 1</li> <li>Assigned UI vs functionality responsibilities</li> </ul> </li> <li> <p>Meeting 4: Repository &amp; Collaboration Setup</p> </li> <li>Date: 15 August 2025  </li> <li>Venue: Online</li> <li>Agenda &amp; Discussions:<ul> <li>Addressed repo cloning/pulling issues</li> <li>Defined branching strategy (feature branches, naming scheme)</li> <li>Created Sprint1-Combination branch for integration</li> <li>Established PR/peer review workflow</li> </ul> </li> <li>Decisions Made:<ul> <li>Finalized branch naming</li> <li>Always merge to Sprint1-Combination first</li> </ul> </li> <li></li> </ul>"},{"location":"workflow/meetings/#sprint-2-meeting-evidence","title":"Sprint 2 Meeting Evidence","text":"<ul> <li>Meeting 1: Sprint Planning</li> <li>Date: 20 August 2025  </li> <li>Venue: Online</li> <li>Agenda &amp; Discussions:<ul> <li>Features for Sprint 2: Profile, Random Matchmaking</li> <li>Profile page: select page range, region (pending client), intro, avatar/username generator</li> <li>Random Matchmaking: button to find pen pal, send/receive letters, inbox, one-time vs long-term (pending client)</li> <li>Early testing</li> <li>Assigned frontend/backend split</li> </ul> </li> <li>Decisions Made:<ul> <li>Focus on Profile &amp; Random Matchmaking for demo</li> <li>Integrate avatar/username APIs</li> <li>Await client input on region &amp; pen pal messaging</li> <li>Initial frontend/backend split</li> </ul> </li> <li> </li> <li> <p>Meeting 2: Design Implementation &amp; Estimates</p> </li> <li>Date: 25 August 2025  </li> <li>Venue: In-person</li> <li>Agenda &amp; Discussions:<ul> <li>Assigned user story estimates</li> <li>Finalized/began implementing designs (Homepage, Profile, Edit Profile, Avatar &amp; Username, Dashboard)</li> <li>Implemented Profile page functionality</li> <li>Reviewed design decisions</li> </ul> </li> <li> <p>Decisions Made:</p> <ul> <li>Finalized designs, began implementation</li> <li>User story estimates completed</li> <li>Prepared for avatar/username API integration</li> </ul> </li> <li> <p>Meeting 3: Random Matchmaking Development &amp; GitHub Merge</p> </li> <li>Date: 27 August 2025  </li> <li>Venue: Online</li> <li>Agenda &amp; Discussions:<ul> <li>Began matchmaking algorithm</li> <li>Merge conflicts from local versions</li> <li>Team-wide merging session: consolidate, resolve conflicts, sync environments</li> </ul> </li> <li>Decisions Made:<ul> <li>Merged branches, consistent codebase</li> <li>Continued matchmaking development</li> </ul> </li> <li> <p></p> </li> <li> <p>Meeting 4: Testing Strategy &amp; User Feedback</p> </li> <li>Date: 1 September 2025  </li> <li>Venue: Online</li> <li>Agenda &amp; Discussions:<ul> <li>Distributed automation testing tasks</li> <li>User feedback: formal questionnaires, printed forms, collection process</li> </ul> </li> <li>Decisions Made:<ul> <li>Assigned automation testing</li> <li>Adopted questionnaire feedback system</li> <li>Distributed/collected forms</li> </ul> </li> </ul>"},{"location":"workflow/meetings/#sprint-3-meeting-evidence","title":"Sprint 3 Meeting Evidence","text":"<ul> <li>Meeting 1: Sprint Planning</li> <li>Date: 4 September 2025  </li> <li>Venue: Online</li> <li>Agenda &amp; Discussions:<ul> <li>Features: Improvements to Profile, Random Matchmaking, Chatting System, Cultural Explorer</li> <li>Chatting System: data model, Firestore collections, REST endpoints, moderation, dashboard, real-time updates, security, extensibility</li> <li>Cultural Explorer: country profiles (REST API), country facts (manual dataset)</li> </ul> </li> <li> <p>Decisions Made:</p> <ul> <li>Focus on Chatting System &amp; Cultural Explorer for demo</li> <li>Explorer: country profiles (API), facts (dataset)</li> <li>Chat system: Firestore collections</li> </ul> </li> <li> <p>Meeting 2: Designs for Implementation &amp; Estimates</p> </li> <li>Date: 10 September 2025  </li> <li>Venue: In-person</li> <li>Agenda &amp; Discussions:<ul> <li>Assigned user story estimates</li> <li>New UI designs for Cultural Explorer, Profile, Edit Profile, Chat System, Dashboard</li> </ul> </li> <li> <p>Decisions Made:</p> <ul> <li>Finalized designs, began implementation</li> <li>User story estimates completed</li> <li>Updated database schema</li> </ul> </li> <li> <p>Meeting 3: In-person Team Coding Session</p> </li> <li>Date: 19 September 2025  </li> <li>Venue: In-person</li> <li>Agenda &amp; Discussions:<ul> <li>Checked progress on frontend/backend tasks</li> <li>Chatting System: Firestore setup, REST endpoints, frontend integration, moderation</li> <li>Cultural Explorer: API integration, dataset creation, mapping logic</li> </ul> </li> <li> <p>Decisions Made:</p> <ul> <li>Merge completed chat/explorer components</li> <li>Assign debugging tasks</li> <li>Set deadline for unfinished features</li> </ul> </li> <li> <p>Stakeholder Interaction Meeting</p> </li> <li>Date: 23 September 2025  </li> <li>Venue: Online</li> <li>Agenda &amp; Discussions:<ul> <li>Presented new design, deliverables</li> <li>Clarified API documentation, database, testing, public API endpoint</li> </ul> </li> <li> <p>Decisions Made:</p> <ul> <li>API docs: clear/structured</li> <li>Add changes to schema</li> <li>Document all tests</li> <li>Prove at least 1 public API endpoint</li> </ul> </li> <li> <p>Meeting 4: Testing Strategy &amp; User Feedback</p> </li> <li>Date: 25 September 2025  </li> <li>Venue: Online</li> <li>Agenda &amp; Discussions:<ul> <li>Distributed automation testing tasks</li> <li>Continued formal feedback approach</li> <li>Printed forms, collection process</li> </ul> </li> <li>Decisions Made:<ul> <li>Assigned automation testing</li> <li>Continued questionnaire feedback system</li> <li>Distributed/collected forms</li> </ul> </li> </ul>"},{"location":"workflow/meetings/#stakeholder-meeting-decisions-agreements","title":"Stakeholder Meeting Decisions &amp; Agreements","text":"<ul> <li>Trial period for matched users, max two rematches.</li> <li>Region is defined as country + time zone + language.</li> <li>Users can preview cultural profiles before matching.</li> <li>Messaging types: one-time vs long-term correspondence.</li> <li>Action items:<ul> <li>Adjust matchmaking logic to support profile previews.</li> <li>Document and finalize trial period rules in requirements.</li> <li>Update region-based preferences in the database schema.</li> <li>Prepare prototype screens reflecting these changes for the next review.</li> </ul> </li> <li> <p>Next steps: Implement discussed changes into the next sprint.</p> </li> <li> <p>Schedule follow-up with stakeholder to present updated prototype</p> </li> </ul>"},{"location":"workflow/release-notes/","title":"Release Notes","text":"<p>Here are the release note summaries for the usmiso/GlobeTalk repository:</p> <ul> <li> <p>Sprint 3 - Full User Functionality (v3.0.1-sprint3, 2025-09-30)</p> <ul> <li>Purpose: Enable anonymous, cross-cultural connections via delayed text letters.</li> <li>Key constraints: Text-only, anonymous (no names/emails published), moderation/reporting, OAuth-based sign-in.</li> <li>Target users: Curious learners, language learners, students, and those seeking low-pressure cultural exchange.</li> </ul> </li> <li> <p>Sprint 3 - Full User Functionality (v3.0.0-sprint3, 2025-09-30)</p> <ul> <li>Duplicate summary and constraints as v3.0.1-sprint3 above.</li> </ul> </li> <li> <p>Sprint 2 - Profile Creation and Matchmaking (v2.0.0-sprint2, 2025-09-02)</p> <ul> <li>Major changes:<ul> <li>Google signup UI, forgot password, homepage, signin design, server setup, profile completion, avatar/username generator, and matchmaking features.</li> <li>Numerous UI and backend enhancements, with contributions from multiple users.</li> </ul> </li> <li>See the full changelog for detailed PR links and new contributors.</li> </ul> </li> <li> <p>Sprint 1 - Sign-in Page (v1.0.0-sprint1, 2025-08-18)</p> <ul> <li>Implemented user Sign-in page with OAuth (Google and Email) authentication.</li> <li>Basic responsive UI and project setup (Next.js + Firebase).</li> <li>Known issues: Missing error messages for invalid credentials, profile page not yet connected.</li> </ul> </li> </ul>"},{"location":"workflow/testing/","title":"Testing &amp; CI","text":"<p>\u2192    </p> <ul> <li> <p>Jest for unit and integration tests   Jest is a fast and reliable JavaScript testing framework. We use it because it provides a simple API, excellent performance, and built-in support for mocking and coverage analysis. It helps ensure our code works as expected and catches regressions early.</p> </li> <li> <p>Testing Library for React component tests   Testing Library encourages testing components from the user's perspective, focusing on accessibility and real-world usage. It helps us write maintainable tests that verify UI behavior without relying on implementation details.</p> </li> <li> <p>GitHub Actions for CI/CD   GitHub Actions automates our build, test, and deployment workflows directly in our repository. It provides seamless integration with GitHub, enabling us to run tests and deploy code on every push or pull request, ensuring code quality and reducing manual effort.</p> </li> <li> <p>Codecov for code coverage reporting   Codecov integrates with our CI pipeline to track code coverage metrics. It gives us insights into which parts of our codebase are tested, helping us identify gaps and maintain high test coverage over time.</p> </li> </ul> <p>\u2192</p>"},{"location":"workflow/testing/#testing-documentation","title":"Testing Documentation","text":""},{"location":"workflow/testing/#1-extended-testing-documentation-paragraph","title":"1. Extended Testing Documentation Paragraph","text":"<p>For our project, we adopted a dual approach to testing: formal user feedback collection and automated testing workflows.</p> <p>On the user testing side, we designed a structured feedback process with at least nine participants, split into three groups of three. Each group was required to select the same language and time zone when creating their profiles. This setup was essential to validate the random matchmaking algorithm\u2014with three users in the same pool, randomness could be demonstrated effectively, as opposed to pairs that would always match deterministically. Testers created accounts, used the matchmaking feature, and recorded their experiences through a formal feedback form. The forms, completed by hand, captured insights on usability, satisfaction, and improvement suggestions in a controlled and documented way.</p> <p>In parallel, we implemented automated testing to ensure technical correctness and reliability. Jest was used for unit and integration tests to validate backend and frontend logic, while Testing Library was applied to test React components from a user\u2019s perspective. Our testing folder contains all automation tests, separate from the pages folder where app logic resides. GitHub Actions was configured to run the test suite automatically on every push or pull request, ensuring continuous quality checks. Codecov was integrated into this CI/CD workflow to provide test coverage insights and highlight untested code paths.</p> <p>Together, these two approaches\u2014structured user feedback collection and automation\u2014ensured that our application was evaluated both from the perspective of real-world usability and from rigorous technical validation.</p>"},{"location":"workflow/testing/#2-jest-setup-usage-instructions","title":"2. Jest Setup &amp; Usage Instructions","text":"<p>Below is the step-by-step setup guide. Following these instructions exactly on any machine should reproduce our testing setup:</p> <pre><code># 1. Initialize your project (if not already done)\nnpm init -y\n</code></pre> <pre><code># 2. Install Jest and Testing Library\nnpm install --save-dev jest @testing-library/react @testing-library/jest-dom\n</code></pre> <pre><code># 3. Install Babel (if using ES Modules or JSX in tests)\nnpm install --save-dev babel-jest @babel/preset-env @babel/preset-react\n</code></pre> <pre><code># 4. Install Codecov for coverage reporting\nnpm install --save-dev codecov\n</code></pre>"},{"location":"workflow/testing/#3configure-jest","title":"3.Configure Jest","text":"<p>Create a jest.config.js file in the project root: <pre><code>module.exports = {\n  testEnvironment: \"jsdom\",\n  transform: {\n    \"^.+\\\\.[jt]sx?$\": \"babel-jest\",\n  },\n  setupFilesAfterEnv: [\"@testing-library/jest-dom\"],\n  collectCoverage: true,\n  coverageReporters: [\"text\", \"lcov\"],\n};\n</code></pre></p>"},{"location":"workflow/testing/#4-configure-babel","title":"4. Configure Babel","text":"<p>Create a babel.config.js file in the project root:</p> <pre><code>javascript\nmodule.exports = {\n  presets: [\n    \"@babel/preset-env\",\n    \"@babel/preset-react\"\n  ],\n};\n</code></pre>"},{"location":"workflow/testing/#5-add-scripts-to-packagejson","title":"5. Add Scripts to package.json","text":"<p>Inside your package.json, add the following under \"scripts\":</p> <pre><code>json\n\"scripts\": {\n  \"test\": \"jest\",\n  \"test:watch\": \"jest --watch\",\n  \"test:coverage\": \"jest --coverage\"\n}\n</code></pre>"},{"location":"workflow/testing/#6-running-tests","title":"6. Running Tests","text":"<ul> <li>Run all tests:</li> </ul> <pre><code>    npm test\n</code></pre> <p>After running coverage, Jest will generate a `coverage/` folder and a summary in the terminal. If integrated with Codecov, the results can be uploaded to their dashboard automatically from GitHub Actions.</p>"},{"location":"workflow/testing/#tests-for-sprint-3-tests-completed-and-tests-for-future","title":"Tests for sprint 3, tests completed, and tests for future","text":"<ol> <li> <p>The following screenshort represents all the tests for this sprint 3, and is an indication of the tests we were able to complete.   </p> </li> <li> <p>Tests that we plan on running in the future includes for the page admin/page.js, pages/reports. It falls under Safety and moderation.</p> </li> <li> <p>The follwing shows code cov achieved for sprint 3   </p> </li> </ol>"}]}